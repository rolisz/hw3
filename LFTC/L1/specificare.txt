REGULI SINTACTICE

program = {'\n' | stmt}

stmt = simple_stmt | compound_stmt
simple_stmt = small_stmt "\n"
small_stmt = expr_stmt | print_stmt | read_stmt | flow_stmt

expr_stmt = type var ['=' atom]
print_stmt = 'print' '(' atom ')'
read_stmt = 'input' '(' var ')'
flow_stmt = break_stmt | continue_stmt | return_stmt
break_stmt = 'break'
continue_stmt = 'continue'
return_stmt = 'return' atom

compound_stmt = if_stmt | while_stmt | funcdef

funcdef = 'def' type func_name '(' argslist ')' ':' suite
funccall = func_name '(' call_list ')'
argslist = {(type var['=' constant] [',']}
call_list = {var ','} var

if_stmt = 'if' test ':' suite {'elif' test ':' suite} ['else' ':' suite]
while_stmt = 'while' test ':' suite ['else' ':' suite]
suite = simple_stmt | "\n" INDENT stmt {stmt} DEDENT

test = and_test {'or' and_test}
and_test = not_test {'and' not_test}
not_test = ['not'] comparison
comparison = expr comp_op expr
comp_op = '<'|'>'|'=='|'>='|'<=' | '!='
expr = term {('+'|'-') term}
term = factor {('*'|'/'|'%') factor}
factor = ['+'|'-'] atom | atom
atom = var|constant
type = ("float"|"char") [\[[1-9]{cifra}\]]

REGULI LEXICALE

var =  litera{litera|cifra}[\[{cifra}\]]
constant = \"{litera|cifra| }\"| nr_real
nr_real = (0|[1-9]{cifra})'.'cifra{cifra}
litera = [A-Za-z]
cifra = [0-9]
